apiVersion: v1
data:
  nextcloud-setup.sql: |-
    CREATE USER 'nextcloud'@'';
    SET PASSWORD FOR 'nextcloud'@'' = PASSWORD('nextcloudpass');
    GRANT ALL ON nextcloud.* TO 'nextcloud'@'';
  radius-process-radacct.sql: |
    #  -*- text -*-
    #
    #  main/mysql/process-radacct.sql -- Schema extensions for processing radacct entries
    #
    #  $Id: 227771b5472aa1453bbb5070d5f7f83e2e3e9199 $

    --  ---------------------------------
    --  - Per-user data usage over time -
    --  ---------------------------------
    --
    --  An extension to the standard schema to hold per-user data usage statistics
    --  for arbitrary periods.
    --
    --  The data_usage_by_period table is populated by periodically calling the
    --  fr_new_data_usage_period stored procedure.
    --
    --  This table can be queried in various ways to produce reports of aggregate
    --  data use over time. For example, if the fr_new_data_usage_period SP is
    --  invoked one per day just after midnight, to produce usage data with daily
    --  granularity, then a reasonably accurate monthly bandwidth summary for a
    --  given user could be obtained with:
    --
    --      SELECT
    --          DATE_FORMAT(period_start, '%Y-%M') AS month,
    --          SUM(acctinputoctets)/1000/1000/1000 AS GB_in,
    --          SUM(acctoutputoctets)/1000/1000/1000 AS GB_out
    --      FROM
    --          data_usage_by_period
    --      WHERE
    --          username='bob' AND
    --          period_end IS NOT NULL
    --      GROUP BY
    --          YEAR(period_start), MONTH(period_start);
    --
    --      +----------------+----------------+-----------------+
    --      | month          | GB_in          | GB_out          |
    --      +----------------+----------------+-----------------+
    --      | 2019-July      | 5.782279230000 | 50.545664820000 |
    --      | 2019-August    | 4.230543340000 | 48.523096420000 |
    --      | 2019-September | 4.847360590000 | 48.631835480000 |
    --      | 2019-October   | 6.456763250000 | 51.686231930000 |
    --      | 2019-November  | 6.362537730000 | 52.385710570000 |
    --      | 2019-December  | 4.301524440000 | 50.762240270000 |
    --      | 2020-January   | 5.436280540000 | 49.067775280000 |
    --      +----------------+----------------+-----------------+
    --      7 rows in set (0.000 sec)
    --
    CREATE TABLE data_usage_by_period (
        username VARCHAR(64),
        period_start DATETIME,
        period_end DATETIME,
        acctinputoctets BIGINT(20),
        acctoutputoctets BIGINT(20),
        PRIMARY KEY (username,period_start)
    );
    CREATE INDEX idx_data_usage_by_period_period_start ON data_usage_by_period (period_start);


    --
    --  Stored procedure that when run with some arbitrary frequency, say
    --  once per day by cron, will process the recent radacct entries to extract
    --  time-windowed data containing acct{input,output}octets ("data usage") per
    --  username, per period.
    --
    --  Each invocation will create new rows in the data_usage_by_period tables
    --  containing the data used by each user since the procedure was last invoked.
    --  The intervals do not need to be identical but care should be taken to
    --  ensure that the start/end of each period aligns well with any intended
    --  reporting intervals.
    --
    --  It can be invoked by running:
    --
    --      CALL fr_new_data_usage_period();
    --
    --
    DELIMITER $$

    DROP PROCEDURE IF EXISTS fr_new_data_usage_period;
    CREATE PROCEDURE fr_new_data_usage_period ()
    BEGIN

        DECLARE v_start DATETIME;
        DECLARE v_end DATETIME;

        SELECT IFNULL(MAX(period_start), FROM_UNIXTIME(0)) INTO v_start FROM data_usage_by_period;
        SELECT NOW() INTO v_end;

        START TRANSACTION;

        --
        -- Add the data usage for the sessions that were active in the current
        -- period to the table. Include all sessions that finished since the start
        -- of this period as well as those still ongoing.
        --
        INSERT INTO data_usage_by_period (username, period_start, period_end, acctinputoctets, acctoutputoctets)
        SELECT *
        FROM (
            SELECT
                username,
                v_start,
                v_end,
                SUM(acctinputoctets) AS acctinputoctets,
                SUM(acctoutputoctets) AS acctoutputoctets
            FROM
                radacct
            WHERE
                acctstoptime > v_start OR
                acctstoptime IS NULL
            GROUP BY
                username
        ) AS s
        ON DUPLICATE KEY UPDATE
            acctinputoctets = data_usage_by_period.acctinputoctets + s.acctinputoctets,
            acctoutputoctets = data_usage_by_period.acctoutputoctets + s.acctoutputoctets,
            period_end = v_end;

        --
        -- Create an open-ended "next period" for all ongoing sessions and carry a
        -- negative value of their data usage to avoid double-accounting when we
        -- process the next period. Their current data usage has already been
        -- allocated to the current and possibly previous periods.
        --
        INSERT INTO data_usage_by_period (username, period_start, period_end, acctinputoctets, acctoutputoctets)
        SELECT *
        FROM (
            SELECT
                username,
                DATE_ADD(v_end, INTERVAL 1 SECOND),
                NULL,
                0 - SUM(acctinputoctets),
                0 - SUM(acctoutputoctets)
            FROM
                radacct
            WHERE
                acctstoptime IS NULL
            GROUP BY
                username
        ) AS s;

        COMMIT;

    END$$

    DELIMITER ;
  radius-schema.sql: |
    ###########################################################################
    # $Id: dcb61f7c26b07351c6be5ff28d91b0a37066d744 $                 #
    #                                                                         #
    #  schema.sql                       rlm_sql - FreeRADIUS SQL Module       #
    #                                                                         #
    #     Database schema for MySQL rlm_sql module                            #
    #                                                                         #
    #     To load:                                                            #
    #         mysql -uroot -prootpass radius < schema.sql                     #
    #                                                                         #
    #                                   Mike Machado <mike@innercite.com>     #
    ###########################################################################
    #
    # Table structure for table 'radacct'
    #

    CREATE TABLE IF NOT EXISTS radacct (
      radacctid bigint(21) NOT NULL auto_increment,
      acctsessionid varchar(64) NOT NULL default '',
      acctuniqueid varchar(32) NOT NULL default '',
      username varchar(64) NOT NULL default '',
      realm varchar(64) default '',
      nasipaddress varchar(15) NOT NULL default '',
      nasportid varchar(32) default NULL,
      nasporttype varchar(32) default NULL,
      acctstarttime datetime NULL default NULL,
      acctupdatetime datetime NULL default NULL,
      acctstoptime datetime NULL default NULL,
      acctinterval int(12) default NULL,
      acctsessiontime int(12) unsigned default NULL,
      acctauthentic varchar(32) default NULL,
      connectinfo_start varchar(50) default NULL,
      connectinfo_stop varchar(50) default NULL,
      acctinputoctets bigint(20) default NULL,
      acctoutputoctets bigint(20) default NULL,
      calledstationid varchar(50) NOT NULL default '',
      callingstationid varchar(50) NOT NULL default '',
      acctterminatecause varchar(32) NOT NULL default '',
      servicetype varchar(32) default NULL,
      framedprotocol varchar(32) default NULL,
      framedipaddress varchar(15) NOT NULL default '',
      framedipv6address varchar(45) NOT NULL default '',
      framedipv6prefix varchar(45) NOT NULL default '',
      framedinterfaceid varchar(44) NOT NULL default '',
      delegatedipv6prefix varchar(45) NOT NULL default '',
      PRIMARY KEY (radacctid),
      UNIQUE KEY acctuniqueid (acctuniqueid),
      KEY username (username),
      KEY framedipaddress (framedipaddress),
      KEY framedipv6address (framedipv6address),
      KEY framedipv6prefix (framedipv6prefix),
      KEY framedinterfaceid (framedinterfaceid),
      KEY delegatedipv6prefix (delegatedipv6prefix),
      KEY acctsessionid (acctsessionid),
      KEY acctsessiontime (acctsessiontime),
      KEY acctstarttime (acctstarttime),
      KEY acctinterval (acctinterval),
      KEY acctstoptime (acctstoptime),
      KEY nasipaddress (nasipaddress)
    ) ENGINE = INNODB;

    #
    # Table structure for table 'radcheck'
    #

    CREATE TABLE IF NOT EXISTS radcheck (
      id int(11) unsigned NOT NULL auto_increment,
      username varchar(64) NOT NULL default '',
      attribute varchar(64)  NOT NULL default '',
      op char(2) NOT NULL DEFAULT '==',
      value varchar(253) NOT NULL default '',
      PRIMARY KEY  (id),
      KEY username (username(32))
    );

    #
    # Table structure for table 'radgroupcheck'
    #

    CREATE TABLE IF NOT EXISTS radgroupcheck (
      id int(11) unsigned NOT NULL auto_increment,
      groupname varchar(64) NOT NULL default '',
      attribute varchar(64)  NOT NULL default '',
      op char(2) NOT NULL DEFAULT '==',
      value varchar(253)  NOT NULL default '',
      PRIMARY KEY  (id),
      KEY groupname (groupname(32))
    );

    #
    # Table structure for table 'radgroupreply'
    #

    CREATE TABLE IF NOT EXISTS radgroupreply (
      id int(11) unsigned NOT NULL auto_increment,
      groupname varchar(64) NOT NULL default '',
      attribute varchar(64)  NOT NULL default '',
      op char(2) NOT NULL DEFAULT '=',
      value varchar(253)  NOT NULL default '',
      PRIMARY KEY  (id),
      KEY groupname (groupname(32))
    );

    #
    # Table structure for table 'radreply'
    #

    CREATE TABLE IF NOT EXISTS radreply (
      id int(11) unsigned NOT NULL auto_increment,
      username varchar(64) NOT NULL default '',
      attribute varchar(64) NOT NULL default '',
      op char(2) NOT NULL DEFAULT '=',
      value varchar(253) NOT NULL default '',
      PRIMARY KEY  (id),
      KEY username (username(32))
    );


    #
    # Table structure for table 'radusergroup'
    #

    CREATE TABLE IF NOT EXISTS radusergroup (
      id int(11) unsigned NOT NULL auto_increment,
      username varchar(64) NOT NULL default '',
      groupname varchar(64) NOT NULL default '',
      priority int(11) NOT NULL default '1',
      PRIMARY KEY  (id),
      KEY username (username(32))
    );

    #
    # Table structure for table 'radpostauth'
    #
    # Note: MySQL versions since 5.6.4 support fractional precision timestamps
    #        which we use here. Replace the authdate definition with the following
    #        if your software is too old:
    #
    #   authdate timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    #
    CREATE TABLE IF NOT EXISTS radpostauth (
      id int(11) NOT NULL auto_increment,
      username varchar(64) NOT NULL default '',
      pass varchar(64) NOT NULL default '',
      reply varchar(32) NOT NULL default '',
      authdate timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
      PRIMARY KEY  (id),
      KEY username (username(32))
    ) ENGINE = INNODB;

    #
    # Table structure for table 'nas'
    #
    CREATE TABLE IF NOT EXISTS nas (
      id int(10) NOT NULL auto_increment,
      nasname varchar(128) NOT NULL,
      shortname varchar(32),
      type varchar(30) DEFAULT 'other',
      ports int(5),
      secret varchar(60) DEFAULT 'secret' NOT NULL,
      server varchar(64),
      community varchar(50),
      description varchar(200) DEFAULT 'RADIUS Client',
      PRIMARY KEY (id),
      KEY nasname (nasname)
    );
  radius-setup.sql: "# -*- text -*-\n##\n## admin.sql -- MySQL commands for creating
    the RADIUS user.\n##\n##\tWARNING: You should change 'localhost' and 'radpass'\n##\t\t
    to something else.  Also update raddb/mods-available/sql\n##\t\t with the new
    RADIUS password.\n##\n\n#\n#  Create default administrator for RADIUS\n#\nCREATE
    USER 'radius'@'localhost';\nSET PASSWORD FOR 'radius'@'localhost' = PASSWORD('radpass');\n\n#
    The server can read any table in SQL\nGRANT SELECT ON radius.* TO 'radius'@'localhost';\n\n#
    The server can write to the accounting and post-auth logging table.\n#\n#  i.e.\nGRANT
    ALL on radius.radacct TO 'radius'@'localhost';\nGRANT ALL on radius.radpostauth
    TO 'radius'@'localhost';\n"
kind: ConfigMap
metadata:
  name: mysql-configmap
  namespace: honeybee
